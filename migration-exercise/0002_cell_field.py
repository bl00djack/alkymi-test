# Generated by Django 3.1.3 on 2021-03-12 21:11

from django.db import migrations, models, transaction
import django.db.models.deletion


# def set_field(apps, schema_editor):
#     # For small number of records

#     Field = apps.get_model("store", "Field")
#     field_dict = {}
#     for field in Field.objects.all():
#         field_dict.update({f"{field.name}_{field.schema_id}": field.id})

#     Cell = apps.get_model("store", "Cell")
#     for cell in Cell.objects.all():
#         cell.field_id = field_dict[f"{cell.field_name}_{cell.record.schema_id}"]
#         cell.save()


def set_field(apps, schema_editor):
    # Complete this function
    # Just using the Django's built-in bulk_update method
    # To Do: test with django-pg-bulk-update library for bulk updating in PostgreSQL

    Field = apps.get_model("store", "Field")
    field_dict = {}
    for field in Field.objects.all().values_list('id', 'name', 'schema_id'):
        field_dict.update({f"{field[1]}_{field[2]}": field[0]})

    Cell = apps.get_model("store", "Cell")
    cells = Cell.objects.all()
    for cell in cells:
        cell.field_id = field_dict[f"{cell.field_name}_{cell.record.schema_id}"]

    Cell.objects.bulk_update(cells, fields=['field_id'], batch_size=1000)


class Migration(migrations.Migration):

    dependencies = [
        ('store', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='cell',
            name='field',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='store.field'),
        ),
        migrations.RunPython(set_field,
                             reverse_code=migrations.RunPython.noop),
    ]
